#
# Copyright (c) 2013-2017 Vinnie Falco (vinnie dot falco at gmail dot com)
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

project beast/doc ;

import boostbook : boostbook ;
import path ;

using boostbook ;
using quickbook ;
using doxygen ;

local sources = [ path.glob-tree ../include/boost/beast : *.hpp *.ipp : detail impl ] ;

#
# HTML documentation for $(BOOST_ROOT)/doc/html
#

# Produce transform.xsl, which converts
# the reference xml into Boost.Book.
#
make transform.xsl
    :
        docca/include/docca/doxygen.xsl
    :
        @make_transform
        <dependency>xsl/config.xsl
        <dependency>xsl/class_detail.xsl
        <dependency>xsl/includes.xsl
        <dependency>xsl/includes_foot.xsl
    ;

actions make_transform
{
    cp $(2) $(1)
    sed -i -e "/<!-- CONFIG_TEMPLATE -->/{r xsl/config.xsl" -e "d}" $(1)
    sed -i -e "/<!-- CLASS_DETAIL_TEMPLATE -->/{r xsl/class_detail.xsl" -e "d}" $(1)
    sed -i -e "/<!-- INCLUDES_TEMPLATE -->/{r xsl/includes.xsl" -e "d}" $(1)
    sed -i -e "/<!-- INCLUDES_FOOT_TEMPLATE -->/{r xsl/includes_foot.xsl" -e "d}" $(1)
}

# Produce the reference xml using Doxygen
#
make reference.xml
    :
        source.dox
        ../include/boost/beast/core/bind_handler.hpp
    :
        @make_xml
        <dependency>$(sources)
    ;

actions make_xml
{
    echo "make_xml"
    echo $(1)

    rm -rf temp
    doxygen $(2)
    xsltproc temp/combine.xslt temp/index.xml > $(1)
}

# Produce the reference.qbk file by running
# the reference xml through the transform.
#
make reference.qbk
    :
        transform.xsl
        reference.xml
    :
        @make_reference
    ;

actions make_reference
{
    xsltproc $(2) $(3) > $(1)
}

install qbk : reference.qbk ;

# Produce the Quickbook XML
#
xml beast_doc
    :
        qbk/00_main.qbk
    :
        <dependency>reference.qbk
    ;

explicit beast_doc ;

install images
    :
        images/message.png
    :
        <location>html/beast/images
    ;

explicit images ;

boostbook beast
    :
        beast_doc
    :
        <xsl:param>boost.root=../../../..
        <xsl:param>root.filename=beast
        <xsl:param>chapter.autolabel=1
        <xsl:param>chunk.section.depth=8                # Depth to which sections should be chunked
        <xsl:param>chunk.first.sections=1               # Chunk the first top-level section?
        <xsl:param>toc.section.depth=8                  # How deep should recursive sections appear in the TOC?
        <xsl:param>toc.max.depth=8                      # How many levels should be created for each TOC?
        <xsl:param>generate.section.toc.level=8         # Control depth of TOC generation in sections
        <xsl:param>generate.toc="chapter toc,title section nop reference nop"
        <include>../../../tools/boostbook/dtd
    :
        <dependency>images
    ;


alias boostdoc : beast : : : ;

explicit boostdoc ;

alias boostrelease ;

explicit boostrelease ;
